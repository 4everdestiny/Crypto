from sage.all import *
import binascii
n = 15048284507909673555125381197375333243656053602388632284987325177932040689737522946513540586940572971877388996407809322885752949102824083458355890094379944365118827838220563988817888089341954829750699661089437224927544924300384700206743812746518849798037498162356734588859683549561371384519160060492329713837134867236211673337007765409765754827503338631381163572514068047403527580784539155679459892503774077779843006318926247568991822542997624507875091182959388314444217981382332569572401482337607958385920022412253122000667575650561249706234280500871586807435096005515678675534355303700664843787399453588597250681107
p4 =0xc9c8f6b0bdd39dc243f9fa52b44338b9de1ff8e634d7dd658406a62b87dcb8b106e3f8ac9ceb5a756440f9ac52dbb5d9c795d35967068f86d803ae4a12fff3ccd3b0fabb27d8ea9e62ef87afd4f25766625d2b994
cipher = 0x21bf98b815dd4cbf540a85e2718696e5740f0c21e918315269d7abf257b75e371c9d831bf196425774e10713db8e492b43879df44fd86b20d4dcb9b64846198e80589f18f18c4f718e0d841aaa2dea87a536fbab988fae27be141ee90021df3932aa7f4cf6f08cd3f5232b374d51402230ed5f7c6840d8fabeb5a906987f642339c5fc0290e3790f4bbaee8fbce08239e388e3a4bae6c8a85addd4361ede1cbe7d7b2dc3f544416593d191766f6dba6b21aae18ccfea7361284ec3d20730c9d9c9c2527e85d2b877ddc046223c8977775da6a7aa7eb805e55e20224402eb1bb6f4560341b74d12b6e12b63c964d24aa9f60eeba4fe251d32eb8d958159cb5141a
e2 = 0xf93b
pbits = 1024
kbits = pbits - p4.nbits()
print p4.nbits()
p4 = p4 << kbits
PR.<x> = PolynomialRing(Zmod(n))
f = x + p4
roots = f.small_roots(X=2^kbits, beta=0.4)
if roots:
    p = p4+int(roots[0])
    print "p: ", hex(int(p))
    assert n % p == 0
    q = n/int(p)
    print "q: ", hex(int(q))
    print gcd(p,q)
    phin = (p-1)*(q-1)
    print gcd(e2,phin)
    d = inverse_mod(e2,phin)
    flag = pow(cipher,d,n)
    flag = hex(int(flag))[2:-1]
    print binascii.unhexlify(flag)